services:
  postgres:
    image: postgres:15-alpine
    container_name: medifly_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medifly-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medifly_backend
    restart: always
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      NODE_ENV: ${NODE_ENV}
      PORT: 5000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - medifly-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medifly_frontend
    restart: always
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      REACT_APP_API_URL: http://localhost:5000
    depends_on:
      - backend
    networks:
      - medifly-network

volumes:
  pgdata:

networks:
  medifly-network:
    driver: bridge
